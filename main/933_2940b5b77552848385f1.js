'use strict'
;(self.webpackChunk_antmjs_vantui = self.webpackChunk_antmjs_vantui || []).push(
  [
    [933],
    {
      933: function (s, n, a) {
        a.r(n),
          (n.default = {
            tile: '高级模版功能说明',
            docs: '<h1>高级模版功能说明</h1>\n<div class="card"><h3 id=""><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg></h3>\n<p><a href="https://github.com/AntmJS/temptaro">高级版 React In Taro 模版工程</a>：目前支持微信、支付宝、抖音、快手、百度小程序；支持 H5</p>\n</div><div class="card"><h3 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E9%AB%98%E7%BA%A7%E7%89%88"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>为什么封装一个高级版</h3>\n<ul>\n<li>\n<p>笔者是 React 的重度使用者，也开发过非常多的 React 应用，也从一线开发一步一步走到管理岗。回想一下，React 很大一部分“问题”是什么？是处理数据依赖不够优雅，不管是从 componentWillReceiveProps 到现在的 useEffect，或者各种全局数据状态管理工具，在时间紧且业务逻辑稍微复杂一点的场景，写出来的结果是可想而知的《PS：业务都来不及写，还管你优不优雅》。为什么很多国内中小型公司用 VUE，我想有一点点原因吧，写起来至少比 React 舒坦；</p>\n</li>\n<li>\n<p>另外一方面，写了无数个页面的我，发现每个页面基本都逃不出进来的时候 loading、然后渲染正常页面，或者渲染异常页面；下拉刷新；有分页的加个上划加载更多；点击的时候要控制抖动；错误的时候要 Toast；没登录的时候要弹出登录；八九不离十，都是差不多的，那有没有可能把这些重复的工作封装起来呢，嗯，我们这么做了；</p>\n</li>\n<li>\n<p>那对于我们来说，其实目的很单一，提高团队协作开发效率，提升代码质量，提高代码可维护性，我想这个模版能解决一些问题吧。当然额外增加了一个实例相比较研发速度及质量，我认为可以忽略；这个模版设计的初衷也是满足中小型企业用的，大公司有足够的资源、时间、规范等解决这些问题。最后，哪里有问题可以进群沟通交流。</p>\n</li>\n</ul>\n</div><div class="card"><h3 id="%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>功能说明</h3>\n<ul>\n<li>默认集成了 prettier eslint stylelint 解决编码规范问题</li>\n<li>默认集成了 commitlint commitizen 解决 commit 规范问题</li>\n<li>默认集成了 husky lint-staged 解决了 commit 之前自动校验代码规范</li>\n<li>通过@antmjs/rapper 库使得 action 层能实现根据 TS 类型自动生成 action 逻辑，保证类型安全</li>\n<li>通过 yarn swagger 使得 action 层也可以自动根据服务端的 swagger api 自动生成 action 逻辑，保证类型安全</li>\n<li>通过@antmjs/iconfont 可以通过 yarn iconfont 兼容 iconfont 图标</li>\n<li>通过@antmjs/trace 可以自己处理埋点需求</li>\n<li>通过@antmjs/trace 可以自动收集未捕获异常</li>\n<li>通过@antmjs/trace 可以很方便的上报埋点需求及异常信息</li>\n<li>通过@antmjs/warning 可以快速的监听到指定文件的变动以快速告知相关合作研发的伙伴，比如谁谁谁私自变更了包依赖或者添加、删除了一个包等</li>\n<li>通过@antmjs/cache 可以很方便的管理全局临时缓存和永久缓存</li>\n<li>通过 recoil 作为 store 的管理工具</li>\n<li>封装了 Container 组件用来自动管理顶部导航栏、下拉刷新、页面异常处理、登录等通用性逻辑</li>\n<li>默认兼容了各端的的一些底层数据不一致，比如页面跳转或者扫码进来的数据统一 decode</li>\n<li>默认封装了一些常用的组件在 components 目录下</li>\n<li>默认封装了 Request 请求，统一规范，通过 TS 的加持，使得响应标准一致</li>\n<li>默认添加了三种类型的页面模版(能覆盖百分之七八十的业务)，普通模版（自动下拉刷新）、分页模版（自动下拉刷新、上划分页），Tabs 分页模版（自动下拉刷新、上划分页、tab 切换及搜索）</li>\n<li>集成了开箱即用的主题变更逻辑</li>\n<li>通过@antmjs/unite 的 Unite“组件”以空间换时间的方案加快研发速度，同时保证 TS 类型安全</li>\n</ul>\n</div><div class="card"><h3 id="Unite%20%E6%98%AF%E4%BB%80%E4%B9%88"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>Unite 是什么</h3>\n<div class="code-box-max">\n<div class="copy-code-btn"></div>\n<pre><code class="language-jsx"><span class="hljs-comment">// 代码不多，可以自己看源码</span>\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Unite</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@antmjs/unite&#x27;</span>\n<span class="hljs-comment">// 和UI无关的全局数据定义在这里面，具体可以看项目模版</span>\n<span class="hljs-keyword">import</span> {} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/cache&#x27;</span>\n<span class="hljs-comment">// 和UI相关的全局数据定义在这里面，具体可以看项目模版</span>\n<span class="hljs-keyword">import</span> {} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span>\n\n<span class="hljs-comment">// 一切都是类型安全，一切都是自动提示 ！哈哈哈哈</span>\n<span class="hljs-comment">// Unite外的错误逻辑Unite无法捕获，Unite回调函数内的方法的异常Unite无法捕获</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Unite</span>(\n  {\n    <span class="hljs-comment">// 和UI相关的当前页面变量定义在state里，和UI无关的当前页面变量定义在和state同层，比如tempData1,tempData2</span>\n    <span class="hljs-attr">state</span>: {},\n    <span class="hljs-attr">tempData1</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,\n    <span class="hljs-attr">tempData2</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,\n    <span class="hljs-comment">// onLoad onReady onShow 如果有发起异步请求的，记得加上async await 否则下拉刷新会打开后立即关闭</span>\n    <span class="hljs-keyword">async</span> <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) {\n      <span class="hljs-comment">// 通过this.state可以取到state的结果</span>\n      <span class="hljs-comment">// 通过this.props可以取到props的结果</span>\n      <span class="hljs-comment">// 通过this.location可以取到路由的结果</span>\n      <span class="hljs-comment">// 通过this.loading可以取到当前正在异步加载中的方法</span>\n      <span class="hljs-comment">// 通过this.hooks可以取到下面传递过来的hooks数据</span>\n      <span class="hljs-comment">// 通过this.error可以取到错误数据，一般不需要用到，Container会通过全局Context去获取及处理</span>\n    },\n    <span class="hljs-keyword">async</span> <span class="hljs-title function_">onReady</span>(<span class="hljs-params"></span>) {},\n    <span class="hljs-keyword">async</span> <span class="hljs-title function_">onShow</span>(<span class="hljs-params"></span>) {},\n    <span class="hljs-keyword">async</span> <span class="hljs-title function_">onHide</span>(<span class="hljs-params"></span>) {},\n  },\n  <span class="hljs-comment">// 这里返回的state loading error 和上方this一致，events除了上方定义的方法外，还有部分内置的方法比如；setHooks setError</span>\n  <span class="hljs-keyword">function</span> (<span class="hljs-params">{ state, events, loading, error }, props</span>) {\n    <span class="hljs-comment">// 伪代码</span>\n    <span class="hljs-keyword">const</span> [menuButton, setMenuButton]: any = <span class="hljs-title function_">useRecoilState</span>(menuButtonStore)\n    <span class="hljs-comment">// 这里通过setHooks方法可以将全局数据及全局数据的设置方法传递过去，方法里面可以通过this.hooks[&#x27;xxx&#x27;]获取到</span>\n    events.<span class="hljs-title function_">setHooks</span>({\n      <span class="hljs-attr">xxx</span>: menuButton,\n      <span class="hljs-attr">yyy</span>: setMenuButton,\n    })\n    <span class="hljs-comment">// 这里可以写hooks</span>\n    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {}, [])\n    <span class="hljs-keyword">return</span> (\n      <span class="hljs-comment">// 这里可以引入Container组件包裹起来，内置导航栏、下拉刷新逻辑、自动处理异常、登录等，具体可以看Container组件</span>\n      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>Unite<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span>\n    )\n  },\n  <span class="hljs-comment">// cancelInterception 默认对事件都添加了“防抖”策略，即触发async方法只有等结束之后再点才有效</span>\n  { <span class="hljs-attr">page</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">cancelInterception</span>: [] },\n)\n</code></pre>\n</div>\n</div><div class="card"><h3 id="Unite%20%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>Unite 解决了什么</h3>\n<ul>\n<li>既能使用 hooks 的能力，又能像 vue 一样快速开发 React 应用，避免了依赖问题</li>\n<li>类型安全</li>\n<li>自动捕获异常，开发只需关注业务本身逻辑</li>\n<li>自动收集正在请求的方法，以 true ｜ false 的形式返回给业务侧</li>\n<li>自动处理下拉刷新逻辑</li>\n<li>建议新项目可以试试这个模版</li>\n</ul>\n<p>注： 目前成功或者错误的处理都遵循{success: true, data: xxx} {success: false, code: \'xxx\', message: \'xxx\'} 的规范，服务端返回的格式返回后建议前端做一个层处理，模版内 Request 部分有说明</p>\n</div>',
            h3Ids:
              ':::为什么封装一个高级版:::功能说明:::Unite 是什么:::Unite 解决了什么',
            codePath: [],
          })
      },
    },
  ],
)
